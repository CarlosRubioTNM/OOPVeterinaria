/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.itch2.oop.veterinaria;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import javax.swing.ListModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Carlos Rubio
 */
public class FramePrincipal extends javax.swing.JFrame {
    //Atributos
    private DefaultListModel<String> modelo;
    private ArrayList<Caballo> caballos;
    private File archivoCaballos;

    /**
     * Creates new form FramePrincipal
     */
    public FramePrincipal() {
        initComponents();
        archivoCaballos = new File("Caballos.cbl");
        caballos = new ArrayList<>();
        modelo = new DefaultListModel<>();
        jList1.setModel(modelo);
        Scanner sc;
        try {
            sc = new Scanner(archivoCaballos);
            int nCaballos = 0;
            String nombre;
            String pedigree;
            String tipoSangre;
            if (sc.hasNextInt()) { //Número de caballos
                nCaballos = sc.nextInt();
            } else {
                JOptionPane.showMessageDialog(null,"El archivo está corrupto.",
                        "ERROR", JOptionPane.ERROR_MESSAGE);
                sc.close();
                return;
            }
            
            for (int i = 0; i < nCaballos; i++) {
                //Nombre del caballo
                if (sc.hasNext()) {
                    nombre = sc.next();
                } else {
                    JOptionPane.showMessageDialog(null,"El archivo está corrupto.",
                        "ERROR", JOptionPane.ERROR_MESSAGE);
                    sc.close();
                    caballos.clear(); //Eliminar todos los caballos de la lista
                    modelo.clear();
                    return;
                }
                
                //Pedigree
                if (sc.hasNext()) {
                    pedigree = sc.next();
                } else {
                    JOptionPane.showMessageDialog(null,"El archivo está corrupto.",
                        "ERROR", JOptionPane.ERROR_MESSAGE);
                    sc.close();
                    caballos.clear(); //Eliminar todos los caballos de la lista
                    modelo.clear();
                    return;
                }
                
                //Tipo de sangre
                if (sc.hasNext()) {
                    tipoSangre = sc.next();
                    if (!tipoSangre.equals("O-") &&
                            !tipoSangre.equals("O+") && 
                            !tipoSangre.equals("A") &&
                            !tipoSangre.equals("B") &&
                            !tipoSangre.equals("AB")) {
                        JOptionPane.showMessageDialog(null,"El archivo está corrupto.",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                        sc.close();
                        caballos.clear(); //Eliminar todos los caballos de la lista
                        modelo.clear();
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(null,"El archivo está corrupto.",
                        "ERROR", JOptionPane.ERROR_MESSAGE);
                    sc.close();
                    return;
                }
                
                //Crear el caballo
                Caballo c1 = new Caballo(nombre);
                c1.setPedigree(pedigree);
                c1.setTipoSangre(tipoSangre);
                
                //Añadir caballo a listas
                caballos.add(c1);
                modelo.addElement(nombre);
            }
            
            sc.close();
        } catch (FileNotFoundException ex) {
            System.out.println("No existe el archivo Caballos.cbl");
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        btnEliminar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jLabel4.setText("Nombre del caballo:");
        jLabel4.setName("lblNombre"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Veterinaria Orientada a Objetos");
        setBackground(new java.awt.Color(204, 255, 204));
        setName("framePOO"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 153, 153));
        jButton1.setText("Crear caballo");
        jButton1.setName("btnInicio"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setName("txtNombre"); // NOI18N

        jLabel1.setText("Nombre del caballo:");
        jLabel1.setName("lblNombre"); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Crear un caballo...");

        jLabel3.setText("Pedigree:");
        jLabel3.setName("lblNombre"); // NOI18N

        jTextField2.setName("txtNombre"); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "O-", "O+", "A", "B", "AB" }));

        jLabel5.setText("Tipo de sangre:");
        jLabel5.setName("lblNombre"); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("Lista de caballos:");

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setToolTipText("");
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        btnEliminar.setBackground(new java.awt.Color(255, 102, 102));
        btnEliminar.setText("Eliminar caballo");
        btnEliminar.setName("btnEliminar"); // NOI18N
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Abrir");
        jMenuItem1.setName("menuAbrir"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Guardar");
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String pedigree = "Corriente cruzado con de la calle";

        //Verificar nombre del caballo
        if (jTextField1.getText() == null || 
                jTextField1.getText().trim().equals("")) {
            System.out.println("ERROR! La caja de texto está vacía.");
            return;
        }
        //Verificar pedigree
        if (jTextField2.getText() != null && 
                !jTextField2.getText().trim().equals("")) {
            pedigree = jTextField2.getText();
        }
        
        //Checar si el dueño comienza con una letra mayúscula
        
        //Crear caballo
        Caballo c1 = new Caballo(jTextField1.getText());
        c1.setPedigree(pedigree);
        c1.setTipoSangre(jComboBox1.getItemAt(jComboBox1.getSelectedIndex()));
        System.out.println(c1.getNombre() + 
                " con pedigree " + c1.getPedigree() + 
                " y tipo de sangre " + c1.getTipoSangre());
        
        //Asignar caballo a lista
        modelo.addElement(c1.getNombre());
        caballos.add(c1);
        
        //Reset interfaz grafica
        jTextField1.setText("");
        jTextField2.setText("");
        jComboBox1.setSelectedIndex(0);
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        int indice =jList1.getSelectedIndex();
        if (indice == -1) {
            //Reset interfaz grafica
            jTextField1.setText("");
            jTextField2.setText("");
            jComboBox1.setSelectedIndex(0);
            return;
        }
        
        Caballo c1 = caballos.get(indice);
        jTextField1.setText(c1.getNombre());
        jTextField2.setText(c1.getPedigree());
        jComboBox1.setSelectedItem(c1.getTipoSangre());
    }//GEN-LAST:event_jList1ValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //Escribir el archivo de caballos
        try {
            File nuevoArchivo = new File("Caballos.cbl");
            BufferedWriter writer = new BufferedWriter(
                    new FileWriter(nuevoArchivo, false)); //Sobreescribir el archivo
            int nCaballos = caballos.size();
            System.out.println(nCaballos);
            Caballo caballoTemp;
            writer.write(String.valueOf(nCaballos));
            writer.newLine();
            for (int i = 0; i < nCaballos; i++) {
                caballoTemp = caballos.get(i);
                writer.write(caballoTemp.getNombre());
                writer.newLine();
                writer.write(caballoTemp.getPedigree());
                writer.newLine();
                writer.write(caballoTemp.getTipoSangre());
                writer.newLine();
            }
            
            writer.close();
            System.out.println("Archivo de caballos creado!");
        } catch (IOException ex) {
            System.out.println("No se pudo escribir en el archivo.");
        }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int indice = jList1.getSelectedIndex();
        
        //Revisar índice
        if (indice == -1) {
            JOptionPane.showMessageDialog(null,"No hay caballo seleccionado.",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        caballos.remove(indice);
        modelo.remove(indice);
        
        //Reset interfaz grafica
        jTextField1.setText("");
        jTextField2.setText("");
        jComboBox1.setSelectedIndex(0);
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FramePrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
